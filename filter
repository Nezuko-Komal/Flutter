// ignore_for_file: unnecessary_import, use_key_in_widget_constructors, library_private_types_in_public_api, avoid_print, non_constant_identifier_names, use_build_context_synchronously, prefer_const_constructors, sized_box_for_whitespace

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:retailer_app/models/allmodel.dart';
import 'package:retailer_app/models/allspecification.dart';
import 'package:retailer_app/screens/dashboard.dart';
import 'package:retailer_app/services/all_services.dart';

class FilterPage extends StatefulWidget {
  @override
  _FilterPageState createState() => _FilterPageState();
}

bool isLoading = true;
List<ProductAllDetails> productdata = [];
List<ProductAllDetails> data = [];

class _FilterPageState extends State<FilterPage> {
  bool isloading = true;
  List<ProductSpecification> data = [];
  List<String> specificationValues = [];
  List<String> uniqueValuesExceptAtIndex = [];

  void fetchspecificationdata() async {
    data = await fetchSpecification("661d4313f5a6a5f18dcf61f4");
    if (data.isNotEmpty) {
      setState(() {
        isloading = false;
      });
    } else {
      print(data);
      print("No data found");
    }
  }

  @override
  void initState() {
    super.initState();
    fetchspecificationdata();
    AllData();
  }

  AllData() async {
    productdata = await fetchalldata();

    if (productdata.isNotEmpty) {
      setState(() {
        isLoading = false;
      });
    } else {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text("NO Data Found"),
        backgroundColor: Colors.red,
      ));
      Navigator.pushReplacement(
          context, MaterialPageRoute(builder: (context) => const RDashBoard()));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Filter'),
      ),
      body: Row(
        children: [
          Container(
            width: MediaQuery.of(context).size.width / 3,
            child: Container(
              color: Color.fromARGB(255, 183, 223, 255),
              child: ListView.builder(
                itemCount: data.length,
                itemBuilder: (context, index) {
                  var keys = data[index].specification.keys.where((key) =>
                      data[index].specification[key]?.isFilter == true);
                  return Column(
                    children: keys.map((key) {
                      return GestureDetector(
                        onTap: () {
                          setState(() {
                            // uniqueValuesExceptAtIndex = [];
                            specificationValues = productdata
                                .map((product) =>
                                    product.specification[key].toString())
                                .toSet() // Convert to set to remove duplicates
                                .toList(); // Convert back to list

                            // for (int i = 0;
                            //     i < specificationValues.length;
                            //     i++) {
                            //   if (i != index) {
                            //     // Exclude the value at the specified index
                            //     uniqueValuesExceptAtIndex
                            //         .add(specificationValues[i]);
                            //   }
                            // }
                          });
                        },
                        child: Container(
                          decoration: BoxDecoration(
                            border: Border(
                              bottom: BorderSide(
                                  color:
                                      const Color.fromARGB(255, 116, 115, 115),
                                  width: 1.0),
                            ),
                          ),
                          child: ListTile(
                            title: Text(
                              key,
                              style: TextStyle(
                                fontSize: 11,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ),
                      );
                    }).toList(),
                  );
                },
              ),
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: specificationValues.length,
              itemBuilder: (context, index) {
                return Container(
                  decoration: BoxDecoration(
                    color: Colors.black12,
                    border: Border.all(color: Colors.black87),
                  ),
                  child: ListTile(
                    title: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          specificationValues[index],
                          style: const TextStyle(fontSize: 12),
                        ),
                        Checkbox(
                          value: false,
                          onChanged: (value) {},
                        )
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
